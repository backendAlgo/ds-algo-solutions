import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;

public class Main {

    /*

    Input: MMCMXCIX
    Output: 2999
    1000+1000+(-100)+1000+10
     */
    public static void main(String[] args) {
        String[] romans = "MMCMXCIX,MMCMXCIII,MMCMXCII,MMCMXCI,MMCMXC,MMCMXCI,MMCMXCII,MMCMXCIII,MMCMXCIV,MMCMXCV,MMCMXCVI,MMCMXCVII,MMCMXCVIII,MMCMXCIX,MMCM,MMCMI,MMCMII,MMCMIII,MMCMIV,MMCMV,MMCMVI,MMCMVII,MMCMVIII,MMCMIX,MMCMX,MMCMXI,MMCMXII,MMCMXIII,MMCMXIV,MMCMXV,MMCMXVI,MMCMXVII,MMCMXVIII,MMCMXIX,MMCMXX,MMCMXXI,MMCMXXII,MMCMXXIII,MMCMXXIV,MMCMXXV,MMCMXXVI,MMCMXXVII,MMCMXXVIII,MMCMXXIX,MMCMXXX,MMCMXXXI,MMCMXXXII,MMCMXXXIII,MMCMXXXIV,MMCMXXXV,MMCMXXXVI,MMCMXXXVII,MMCMXXXVIII,MMCMXXXIX,MMCMXL,MMCMXLI,MMCMXLII,MMCMXLIII,MMCMXLIV,MMCMXLV,MMCMXLVI,MMCMXLVII,MMCMXLVIII,MMCMXLIX,MMCM,MMCMI,MMCMII,MMCMIII,MMCMIV,MMCMV,MMCMVI,MMCMVII,MMCMVIII,MMCMIX,MMCMX,MMCMXI,MMCMXII,MMCMXIII,MMCMXIV,MMCMXV,MMCMXVI,MMCMXVII,MMCMXVIII,MMCMXIX,MMCMXX,MMCMXXI,MMCMXXII,MMCMXXIII,MMCMXXIV,MMCMXXV,MMCMXXVI,MMCMXXVII,MMCMXXVIII,MMCMXXIX,MMCMXXX,MMCMXXXI,MMCMXXXII,MMCMXXXIII,MMCMXXXIV,MMCMXXXV,MMCMXXXVI,MMCMXXXVII,MMCMXXXVIII,MMCMXXXIX,MMCMXL,MMCMXLI,MMCMXLII,MMCMXLIII,MMCMXLIV,MMCMXLV,MMCMXLVI,MMCMXLVII,MMCMXLVIII,MMCMXLIX,MM,MMI,MMII,MMIII,MMIV,MMV,MMVI,MMVII,MMVIII,MMIX,MMX,MMXI,MMXII,MMXIII,MMXIV,MMXV,MMXVI,MMXVII,MMXVIII,MMXIX,MMXX,MMXXI,MMXXII,MMXXIII,MMXXIV,MMXXV,MMXXVI,MMXXVII,MMXXVIII,MMXXIX,MMXXX,MMXXXI,MMXXXII,MMXXXIII,MMXXXIV,MMXXXV,MMXXXVI,MMXXXVII,MMXXXVIII,MMXXXIX,MMXL,MMXLI,MMXLII,MMXLIII,MMXLIV,MMXLV,MMXLVI,MMXLVII,MMXLVIII,MMXLIX,M,MI,MII,MIII,MIV,MV,MVI,MVII,MVIII,MIX,MX,MXI,MXII,MXIII,MXIV,MXV,MXVI,MXVII,MXVIII,MXIX,MXX,MXXI,MXXII,MXXIII,MXXIV,MXXV,MXXVI,MXXVII,MXXVIII,MXXIX,MXXX,MXXXI,MXXXII,MXXXIII,MXXXIV,MXXXV,MXXXVI,MXXXVII,MXXXVIII,MXXXIX,MXL,MXLI,MXLII,MXLIII,MXLIV,MXLV,MXLVI,MXLVII,MXLVIII,MXLIX,MLI,MLII,MLIII,MLIV,MLV,MLVI,MLVII,MLVIII,MLIX,MLX,MLXI,MLXII,MLXIII,MLXIV,MLXV,MLXVI,MLXVII,MLXVIII,MLXIX,MLXX,MLXXI,MLXXII,MLXXIII,MLXXIV,MLXXV,MLXXVI,MLXXVII,MLXXVIII,MLXXIX,MLXXX,MLXXXI,MLXXXII,MLXXXIII,MLXXXIV,MLXXXV,MLXXXVI,MLXXXVII,MLXXXVIII,MLXXXIX,MLXC,MLXCI,MLXCII,MLXCIII,MLXCIV,MLXCV,MLXCVI,MLXCVII,MLXCVIII,MLXCIX,MC,MCI,MCII,MCIII,MCIV,MCV,MCVI,MCVII,MCVIII,MCIX,MCX,MCXI,MCXII,MCXIII,MCXIV,MCXV,MCXVI,MCXVII,MCXVIII,MCXIX,MCXX,MCXXI,MCXXII,MCXXIII,MCXXIV,MCXXV,MCXXVI,MCXXVII,MCXXVIII,MCXXIX,MCXXX,MCXXXI,MCXXXII,MCXXXIII,MCXXXIV,MCXXXV,MCXXXVI,MCXXXVII,MCXXXVIII,MCXXXIX,MCXL,MCXLI,MCXLII,MCXLIII,MCXLIV,MCXLV,MCXLVI,MCXLVII,MCXLVIII,MCXLIX,MCL,MCLI,MCLII,MCLIII,MCLIV,MCLV,MCLVI,MCLVII,MCLVIII,MCLIX,MCLX,MCLXI,MCLXII,MCLXIII,MCLXIV,MCLXV,MCLXVI,MCLXVII,MCLXVIII,MCLXIX,MCLXX,MCLXXI,MCLXXII,MCLXXIII,MCLXXIV,MCLXXV,MCLXXVI,MCLXXVII,MCLXXVIII,MCLXXIX,MCLXXX,MCLXXXI,MCLXXXII,MCLXXXIII,MCLXXXIV,MCLXXXV,MCLXXXVI,MCLXXXVII,MCLXXXVIII,MCLXXXIX,MCXC,MCXCI,MCXCII,MCXCIII,MCXCIV,MCXCV,MCXCVI,MCXCVII,MCXCVIII,MCXCIX,MCC,MCCI,MCCII,MCCIII,MCCIV,MCCV,MCCVI,MCCVII,MCCVIII,MCCIX,MCCX,MCCXI,MCCXII,MCCXIII,MCCXIV,MCCXV,MCCXVI,MCCXVII,MCCXVIII,MCCXIX,MCCXX,MCCXXI,MCCXXII,MCCXXIII,MCCXXIV,MCCXXV,MCCXXVI,MCCXXVII,MCCXXVIII,MCCXXIX,MCCXXX,MCCXXXI,MCCXXXII,MCCXXXIII,MCCXXXIV,MCCXXXV,MCCXXXVI,MCCXXXVII,MCCXXXVIII,MCCXXXIX,MCCXL,MCCXLI,MCCXLII,MCCXLIII,MCCXLIV,MCCXLV,MCCXLVI,MCCXLVII,MCCXLVIII,MCCXLIX,MCCI,MCCII,MCCIII,MCCIV,MCCV,MCCVI,MCCVII,MCCVIII,MCCIX,MCCX,MCCXI,MCCXII,MCCXIII,MCCXIV,MCCXV,MCCXVI,MCCXVII,MCCXVIII,MCCXIX,MCCXX,MCCXXI,MCCXXII,MCCXXIII,MCCXXIV,MCCXXV,MCCXXVI,MCCXXVII,MCCXXVIII,MCCXXIX,MCCXXX,MCCXXXI,MCCXXXII,MCCXXXIII,MCCXXXIV,MCCXXXV,MCCXXXVI,MCCXXXVII,MCCXXXVIII,MCCXXXIX,MCCXL,MCCXLI,MCCXLII,MCCXLIII,MCCXLIV,MCCXLV,MCCXLVI,MCCXLVII,MCCXLVIII,MCCXLIX,MCC,L,MCI,MCII,MCIII,MCIV,MCV,MCVI,MCVII,MCVIII,MCIX,MCX,MCXI,MCXII,MCXIII,MCXIV,MCXV,MCXVI,MCXVII,MCXVIII,MCXIX,MCXX,MCXXI,MCXXII,MCXXIII,MCXXIV,MCXXV,MCXXVI,MCXXVII,MCXXVIII,MCXXIX,MCXXX,MCXXXI,MCXXXII,MCXXXIII,MCXXXIV,MCXXXV,MCXXXVI,MCXXXVII,MCXXXVIII,MCXXXIX,MCXL,MCXLI,MCXLII,MCXLIII,MCXLIV,MCXLV,MCXLVI,MCXLVII,MCXLVIII,MCXLIX,MCL,MCCLI,MCCLII,MCCLIII,MCCLIV,MCCLV,MCCLVI,MCCLVII,MCCLVIII,MCCLIX,MCCLX,MCCLXI,MCCLXII,MCCLXIII,MCCLXIV,MCCLXV,MCCLXVI,MCCLXVII,MCCLXVIII,MCCLXIX,MCCLXX,MCCLXXI,MCCLXXII,MCCLXXIII,MCCLXXIV,MCCLXXV,MCCLXXVI,MCCLXXVII,MCCLXXVIII,MCCLXXIX,MCCLXXX,MCCLXXXI,MCCLXXXII,MCCLXXXIII,MCCLXXXIV,MCCLXXXV,MCCLXXXVI,MCCLXXXVII,MCCLXXXVIII,MCCLXXXIX,MCCXC,MCCXCI,MCCXCII,MCCXCIII,MCCXCIV,MCCXCV,MCCXCVI,MCCXCVII,MCCXCVIII,MCCXCIX,MCC,MCCLI,MCCLII,MCCLIII,MCCLIV,MCCLV,MCCLVI,MCCLVII,MCCLVIII,MCCLIX,MCCLX,MCCLXI,MCCLXII,MCCLXIII,MCCLXIV,MCCLXV,MCCLXVI,MCCLXVII,MCCLXVIII,MCCLXIX,MCCLXX,MCCLXXI,MCCLXXII,MCCLXXIII,MCCLXXIV,MCCLXXV,MCCLXXVI,MCCLXXVII,MCCLXXVIII,MCCLXXIX,MCCLXXX,MCCLXXXI,MCCLXXXII,MCCLXXXIII,MCCLXXXIV,MCCLXXXV,MCCLXXXVI,MCCLXXXVII,MCCLXXXVIII,MCCLXXXIX,MCXC,MCCCI,MCCCII,MCCCIII,MCCCIV,MCCCV,MCCCVI,MCCCVII,MCCCVIII,MCCCIX,MCCCX,MCCCXI,MCCCXII,MCCCXIII,MCCCXIV,MCCCXV,MCCCXVI,MCCCXVII,MCCCXVIII,MCCCXIX,MCCCXX,MCCCXXI,MCCCXXII,MCCCXXIII,MCCCXXIV,MCCCXXV,MCCCXXVI,MCCCXXVII,MCCCXXVIII,MCCCXXIX,MCCCXXX,MCCCXXXI,MCCCXXXII,MCCCXXXIII,MCCCXXXIV,MCCCXXXV,MCCCXXXVI,MCCCXXXVII,MCCCXXXVIII,MCCCXXXIX,MCCCXL,MCCCXLI,MCCCXLII,MCCCXLIII,MCCCXLIV,MCCCXLV,MCCCXLVI,MCCCXLVII,MCCCXLVIII,MCCCXLIX,MCCL,MCCCLI,MCCCLII,MCCCLIII,MCCCLIV,MCCCLV,MCCCLVI,MCCCLVII,MCCCLVIII,MCCCLIX,MCCCLX,MCCCLXI,MCCCLXII,MCCCLXIII,MCCCLXIV,MCCCLXV,MCCCLXVI,MCCCLXVII,MCCCLXVIII,MCCCLXIX,MCCCLXX,MCCCLXXI,MCCCLXXII,MCCCLXXIII,MCCCLXXIV,MCCCLXXV,MCCCLXXVI,MCCCLXXVII,MCCCLXXVIII,MCCCLXXIX,MCCCLXXX,MCCCLXXXI,MCCCLXXXII,MCCCLXXXIII,MCCCLXXXIV,MCCCLXXXV,MCCCLXXXVI,MCCCLXXXVII,MCCCLXXXVIII,MCCCLXXXIX,MCCCXC,MCCCXCI,MCCCXCII,MCCCXCIII,MCCCXCIV,MCCCXCV,MCCCXCVI,MCCCXCVII,MCCCXCVIII,MCCCXCIX,MCD,CDXCIX,CDXCIII,CDXCII,CDXCI,CDXC,CDXCI,CDXCII,CDXCIII,CDXCIV,CDXCV,CDXCVI,CDXCVII,CDXCVIII,CDXCIX,CD,CDI,CDII,CDIII,CDIV,CDV,CDVI,CDVII,CDVIII,CDIX,CDX,CDXI,CDXII,CDXIII,CDXIV,CDXV,CDXVI,CDXVII,CDXVIII,CDXIX,CDXX,CDXXI,CDXXII".split(",");
        for (String roman : romans) {
            System.out.println(romanToInteger(roman));
        }
        System.out.println(romanToInteger("DCXLIX"));
        System.out.println(romanToInteger("MMDCCCLXXXIII"));
        System.out.println(integerToRoman(649));
    }
    /*
    MMCMXCIX
    2999 ->
    2 * M,
    2000
    900
    90
    9
    CXXX

    MMIM
     */

    public static String integerToRoman(int integer) {
        int[] values = new int[]{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
        String[] strings = new String[]{"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < values.length; i++) {
            int count = integer / values[i];
            builder.append(strings[i].repeat(count));
            integer %= values[i];
        }
        return builder.toString();
    }

    public static int romanToInteger(String roman) {
        Integer answer = 0;
        Map<Character, Integer> charToInt = Map.of('I', 1, 'V', 5, 'X', 10, 'L', 50, 'C', 100, 'D', 500, 'M', 1000);
        for (int i = 0; i < roman.length() - 1; i++) {
            char currChar = roman.charAt(i);
            char nextChar = roman.charAt(i + 1);
            int currVal = charToInt.get(currChar);
            int nextVal = charToInt.get(nextChar);
            if (currVal < nextVal) {
                answer -= currVal;
            } else {
                answer += currVal;
            }
        }
        answer += charToInt.get(roman.charAt(roman.length() - 1));
        return answer;
    }
}
